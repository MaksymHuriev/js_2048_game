{"version":3,"sources":["scripts/main.js"],"names":["board","score","buttonStart","document","querySelector","messageStart","messageLose","messageWin","table","scoreGame","cols","rows","startGame","r","push","Array","fill","classList","replace","innerText","add","generateCell","x","y","Math","floor","random","updateTable","c","currentTableCell","cells","boardValue","value","gameWon","gameLost","remove","compareBoardAfterSlide","originalBoard","copiedBoard","filterZero","row","filter","cell","slideCells","newRow","i","length","slideCellsLeft","slideCellsRight","reverse","slideCellsUp","slideCellsDown","addEventListener","e","preventDefault","newBoard","JSON","parse","stringify","code"],"mappings":"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","file":"main.2a16e922.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst table = document.querySelector('.game-field');\nconst scoreGame = document.querySelector('.game-score');\n\nconst cols = 4;\nconst rows = 4;\nlet board;\nlet score;\n\nbuttonStart.addEventListener('click', startGame);\n\nfunction startGame() {\n  board = [];\n  score = 0;\n\n  for (let r = 0; r < rows; r++) {\n    board.push(new Array(cols).fill(0));\n  }\n\n  buttonStart.classList.replace('start', 'restart');\n  buttonStart.innerText = 'Restart';\n\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  generateCell();\n  generateCell();\n}\n\nfunction generateCell() {\n  let x;\n  let y;\n\n  do {\n    x = Math.floor(Math.random() * rows);\n    y = Math.floor(Math.random() * cols);\n\n    if (board[x][y] === 0) {\n      board[x][y] = Math.random() >= 0.9 ? 4 : 2;\n      break;\n    }\n  } while (true);\n\n  updateTable();\n}\n\nfunction updateTable() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      const currentTableCell = table.rows[r].cells[c];\n      const boardValue = board[r][c];\n\n      currentTableCell.innerText = '';\n      currentTableCell.classList.value = '';\n      currentTableCell.classList.add('field-cell');\n\n      if (boardValue > 0) {\n        currentTableCell.innerText = boardValue;\n        currentTableCell.classList.add(`field-cell--${boardValue}`);\n      }\n\n      if (boardValue === 2048) {\n        gameWon();\n      }\n    }\n  }\n\n  scoreGame.innerText = score;\n\n  if (gameLost()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction gameWon() {\n  messageWin.classList.remove('hidden');\n  buttonStart.classList.replace('restart', 'start');\n  buttonStart.innerText = 'Start';\n}\n\nfunction gameLost() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      if (board[r][c] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let c = 0; c < cols; c++) {\n    for (let r = 0; r < rows - 1; r++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n});\n\ndocument.addEventListener('keyup', (e) => {\n  const newBoard = JSON.parse(JSON.stringify(board));\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideCellsLeft();\n      break;\n    case 'ArrowRight':\n      slideCellsRight();\n      break;\n    case 'ArrowUp':\n      slideCellsUp();\n      break;\n    case 'ArrowDown':\n      slideCellsDown();\n      break;\n    default:\n      break;\n  }\n\n  if (compareBoardAfterSlide(board, newBoard)) {\n    generateCell();\n  }\n\n  updateTable();\n});\n\nfunction compareBoardAfterSlide(originalBoard, copiedBoard) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      if (originalBoard[r][c] !== copiedBoard[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction filterZero(row) {\n  return row.filter(cell => cell !== 0);\n}\n\nfunction slideCells(row) {\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < cols) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideCellsLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slideCells(row);\n    board[r] = row;\n  }\n}\n\nfunction slideCellsRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slideCells(row.reverse());\n    board[r] = row.reverse();\n  }\n}\n\nfunction slideCellsUp() {\n  for (let c = 0; c < cols; c++) {\n    let row = [];\n\n    for (let r = 0; r < rows; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = slideCells(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    }\n  }\n}\n\nfunction slideCellsDown() {\n  for (let c = 0; c < cols; c++) {\n    let row = [];\n\n    for (let r = 0; r < rows; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = slideCells(row.reverse());\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    }\n  }\n}\n"]}